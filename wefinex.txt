let client = ''
let uid = ''
let accessToken = JSON.parse(localStorage.getItem('USER_TOKEN')).access_token
let refreshToken = JSON.parse(localStorage.getItem('USER_TOKEN')).refresh_token
let balanceType = localStorage.getItem('BO_BALANCE_TYPE')
let balance = 0

let basebet = 10
let nextbet = basebet
let bethigh = true

let run = true
let win = true
let bets = 0
let wins = 0
let losses = 0
let profit = 0
let results = [] 

function addJs(src, cb) {
    var s = document.createElement('script')
    s.type = 'text/javascript', s.src = src, s.onload = cb
    document.head.appendChild(s)
}

function log() {
    console.clear()
    console.log('HI:', uid)
    console.log('BALANCE:', balance)
    console.log('PROFIT:', profit)
    console.log('BETS:', bets)
    console.log('WINS:', wins)
    console.log('LOSSES:', losses)
}

async function connectServer() {
    client = io('wss://ws.wefinex.net', {
        reconnectionDelayMax: 1e4,
        transports: ['websocket'],
        query: {
            uid,
            ssid: accessToken
        }
    })

    return 'SERVER CONNECTED'
}

async function getToken() {
    return $.ajax({
        url: '/api/auth/auth/token',
        method: 'POST',
        dataType: 'json',
        headers: {
            'content-type': 'application/json; charset=utf-8'
        },
        data: JSON.stringify({
            client_id: 'Botrade',
            grant_type: 'refresh_token',
            refresh_token: refreshToken
        })
    })
}

async function getProfile() {
    return $.ajax({
        url: '/api/auth/me/profile',
        method: 'GET',
        headers: {
            authorization: 'Bearer ' + accessToken
        }
    })
}

async function getBalance() {
    return $.ajax({
        url: '/api/wallet/binaryoption/bo-balance',
        method: 'GET',
        headers: {
            authorization: 'Bearer ' + accessToken
        }
    })
}

async function postBet() {
    return $.ajax({
        url: '/api/wallet/binaryoption/bet',
        method: 'POST',
        headers: {
            'content-type': 'application/json; charset=utf-8',
            authorization: 'Bearer ' + accessToken
        },
        data: JSON.stringify({
            betType: bethigh ? 'UP' : 'DOWN',
            betAmount: nextbet,
            betAccountType: balanceType
        })
    })
}

addJs('https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.4.0/socket.io.js', () => {
    getProfile().then(response => {
        uid = response.d.uid

        getToken().then(response => {
            accessToken = response.d.access_token

            getBalance().then(response => {
                balanceType == 'DEMO' ? balance = Number(response.d.demoBalance) : balance = Number(response.d.availableBalance)

                connectServer().then(response => {
                    console.log(response)
                    client.emit('BO_RESULT_SUBSCRIBE')
                    client.emit('SOCKET_BO_LAST_RESULT_SUBSCRIBE')
                    client.on('BO_RESULT', handleData)
                    client.on('SOCKET_BO_LAST_RESULT', handleLastResult)
                    log()
                })
            })
        })
    })
})

function handleLastResult(data) {
    // console.log(data)
    let index = results.findIndex(r => r.id == data[0].id)

    if (index < 0) return results.push({
        id: data[0].id,
        result: data[0].finalSide
    })

    console.log(results)
}

function handleData(data) {
    bets++

    if (data.result == 'WIN') {
        win = true
        wins++
        profit += Number(data.winAmount)
    }
    else {
        win = false
        losses++
        profit += (0 - nextbet)
    }

    log()
    dobet()
    getBalance().then(response => {
        balanceType == 'DEMO' ? balance = Number(response.d.demoBalance) : balance = Number(response.d.availableBalance)
        log()
    })

    if (run) playBet()
}

function start() {
    playBet()
}

function playBet() {
    postBet().then(response => {
        if (!response.ok) return setTimeout(() => playBet(), 3e3)

        log()
    }).catch(() => {
        setTimeout(() => playBet(), 3e3)
    })
}

function dobet() {
    if (win) {
        nextbet = basebet
    }
    else {
        nextbet *= 2
    }
}